#include <stdio.h>
#include <string.h>
#include <stdlib.h>

struct Node{
  int key;
  struct Node* left, *right;
  int height;
};

int max(int a, int b){
  return(a>b)?a:b;
}

int height(struct Node* root){
  if(root==NULL) return 0;
  return root->height;
}

int getBalance(struct Node* root){
  if(root==NULL) return 0;
  return height(root->left) - height(root->right);
}

struct Node* newNode(int key){
  struct Node* tnode = (struct Node *)malloc(sizeof(struct Node));
  tnode->key = key;
  tnode->left = tnode->right = NULL;
  tnode->height = 1;
  return tnode;
}

struct Node* minVal(struct Node* root){
  struct Node* curr = root->left;
  while(root->left != NULL) curr = curr->left;
  return curr;
}

struct Node* searchRoot(struct Node* root, int key){
  if(root==NULL || root->key){
    return root;
  }
  if(key < root->key){
    return searchRoot(root->left, key);
  }else if(key > root->key){
    return searchRoot(root->right, key);
  }
}


struct Node* leftRotate(struct Node* root){
  struct Node* x = root->right;
  struct Node* sub = x->left;

  x->left = root;
  root->right = sub;

  root->height = max(height(root->left), height(root->right));
  x->height = max(height(root->left), height(root->right));
  return x;
}

struct Node* rightRotate(struct Node* root){
  struct Node* x = root->left;
  struct Node* sub = x->right;

  x->right = root;
  root->left = sub;

  root->height = max(height(root->left), height(root->right));
  x->height = max(height(root->left), height(root->right));

  return x;
}

struct Node* insertNode(struct Node* root, int key){
  if(root==NULL){
    return newNode(key);
  }
  if(key < root->key){
    root->left = insertNode(root->left, key);
  }else if(key > root->key){
    root->right = insertNode(root->right, key);
  }else{
    return root;
  }

  root->height = 1 + max(height(root->left), height(root->right));
  int balance = getBalance(root);

  // LL
  if(balance > 1 && key < root->left->key){
    return rightRotate(root);
  }
  if(balance > 1 && key > root->left->key){
    root->left = leftRotate(root->left);
    return rightRotate(root);
  }
  if(balance < -1 && key > root->right->key){
    return leftRotate(root);
  }
  if(balance < -1 && key < root->right->key){
    root->right = rightRotate(root->right);
    return rightRotate(root);
  }
  return root;
}

struct Node* deleteNode(struct Node* root, int key){
  if(root==NULL){
    return NULL;
  }
  if(key < root->key){
    root->left = deleteNode(root->left, key);
  }else if(key > root->key){
    root->right = deleteNode(root->right, key);
  }else{
    if(root->left == NULL || root->right == NULL){
      struct Node* temp = root->left ? root->left : root->right;
      if(temp == NULL){
        temp = root;
        root = NULL;
      }else{
        *root = *temp;
      }
      free(temp);
    }else{
      struct Node* pred = minVal(root);
      root->key = pred->key;

      root->right = deleteNode(root->right, key);
    }
  }
  if(root==NULL){
    return NULL;
  }
  root->height = 1 + max(height(root->left), height(root->right));
  int balance = getBalance(root);
   // LL
  if(balance > 1 && key < root->left->key){
    return rightRotate(root);
  }
  if(balance > 1 && key > root->left->key){
    root->left = leftRotate(root->left);
    return rightRotate(root);
  }
  if(balance < -1 && key > root->right->key){
    return leftRotate(root);
  }
  if(balance < -1 && key < root->right->key){
    root->right = rightRotate(root->right);
    return rightRotate(root);
  }
  return root;
  
  
}

void preOrder(struct Node* root){
  if(root!=NULL){
    printf(" %d", root->key);
    preOrder(root->left);
    preOrder(root->right);
  }
}

void inOrder(struct Node* root){
  if(root!=NULL){
    inOrder(root->left);
    printf(" %d", root->key);
    inOrder(root->right);
  }
}

void postOrder(struct Node* root){
  if(root!=NULL){
    postOrder(root->left);
    postOrder(root->right);
    printf(" %d", root->key);
  }
}

int main(){

  struct Node* root = NULL;
  int key;
  int pilih;

  do {
    printf("1. Insert\n");
    printf("2. View\n");
    printf("3. Delete\n");
    printf("4. Search\n");
    printf("5. Exit\n");
    scanf("%d", &pilih);
    
    switch(pilih){
      case 1: {
        printf("Insert: ");
        scanf("%d", &key);
        root = insertNode(root, key);
        break;
      }
      case 2: {
        printf("Traversal: \n");
        printf("Pre Order: ");
        preOrder(root);
        printf("\ninOrder: ");
        inOrder(root);
        printf("\nPost Order: ");
        postOrder(root);
        printf("\n");
        break;
      }
      case 3: {
        printf("Insert: ");
        scanf("%d", &key);
        root = deleteNode(root, key);
        break;
      }
      case 4: {
        printf("Insert: ");
        scanf("%d", &key);
        struct Node* findNode = searchRoot(root, key);

        if(findNode == NULL){
          printf("NO DATA\n");
        }else{
          printf("Found Data %d\n", key);
        }
        break;
      }
      case 5: {
        printf("Exiting..\n");
        exit(0);
        break;
      }
      default : {
        exit(0);
      }
    }
  }while(pilih != 6);
  
  return 0;
}
